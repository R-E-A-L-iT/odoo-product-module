# -*- coding: utf-8 -*-

from .utilities import utilities
from datetime import datetime, timedelta
from functools import partial
from itertools import groupby
import logging

from odoo.tools.translate import _
from odoo import models

_logger = logging.getLogger(__name__)


class product_sync_common:
    @classmethod
    def translatePricelist(cls, database, product, name, description, lang):
        try:
            # Check if the language is active in the system
            active_language = database.env["res.lang"].search([("code", "=", lang)])
            if not active_language:
                _logger.warning(f"Language {lang} is not active in the system. Skipping translation.")
                return

            # Add or update translations for the product name
            if name:
                product.with_context(lang=lang).write({"name": name})
                _logger.info(f"Updated translation for product name to '{name}' in language {lang}.")

            # Add or update translations for the product description
            if description:
                product.with_context(lang=lang).write({"description_sale": description})
                _logger.info(f"Updated translation for product description to '{description}' in language {lang}.")

        except Exception as e:
            _logger.error(
                f"Failed to translate product {product.id} in language {lang}: {str(e)}",
                exc_info=True,
            )
    # @classmethod
    # def translatePricelist(cls, database, product, name, description, lang):
    #     try:
    #         # Check if the language is active in the system
    #         active_language = database.env["res.lang"].search([("code", "=", lang)])
    #         if not active_language:
    #             _logger.warning(f"Language {lang} is not active in the system. Skipping translation.")
    #             return

    #         # Add or update translations for the name
    #         if name:
    #             database.env["ir.translation"]._set_ids(
    #                 module="product",
    #                 type="model",
    #                 name="product.template,name",
    #                 res_id=product.id,
    #                 lang=lang,
    #                 value=name,
    #             )

    #         # Add or update translations for the description
    #         if description:
    #             database.env["ir.translation"]._set_ids(
    #                 module="product",
    #                 type="model",
    #                 name="product.template,description_sale",
    #                 res_id=product.id,
    #                 lang=lang,
    #                 value=description,
    #             )

    #         _logger.info(f"Translations updated for product {product.id} in language {lang}.")
    #     except Exception as e:
    #         _logger.error(
    #             f"Failed to translate product {product.id} in language {lang}: {str(e)}",
    #             exc_info=True,
    #         )


    # Methode to add a product to a pricelist
    # Input
    #   database        Variable that provides Access to the Active Database
    #   produt:         Product generated by Odoo
    #   pricelistName:  The name of the list to add the product
    #   price           The price

    @classmethod
    def addProductToPricelist(cls, database, product, pricelistName, price):
        try:
            pricelist_id = (
                database.env["product.pricelist"]
                .search([("name", "=", pricelistName)])[0]
                .id
            )

            pricelist_item_ids = database.env["product.pricelist.item"].search(
                [("product_tmpl_id", "=", product.id), ("pricelist_id", "=", pricelist_id)]
            )

            if len(pricelist_item_ids) > 0:
                pricelist_item = pricelist_item_ids[len(pricelist_item_ids) - 1]
            else:
                pricelist_item = database.env["product.pricelist.item"].create(
                    {"pricelist_id": pricelist_id, "product_tmpl_id": product.id}
                )[0]

            pricelist_item.product_tmpl_id = product.id
            pricelist_item.applied_on = "1_product"
            if (str(price) != " ") and (str(price) != ""):
                pricelist_item.fixed_price = float(price)

            _logger.info(f"Product {product.id} added/updated in pricelist {pricelistName}.")
        except Exception as e:
            _logger.exception(f"Failed to update pricelist for product {product.id}: {str(e)}")